{"mappings":"AAAA,MAAMA,QAAUC,SAASC,iBAAiB,QACpCC,WAAaF,SAASC,iBAAiB,iBA8C7C,SAASE,gBAAgBC,GACvB,OAAOC,UAAUC,UAAUC,UAAUH,E,CAYvC,SAASI,gBAAgBC,GAEvB,MAAMC,EAASD,EAAYE,oBAAsB,GAEjDZ,QAAQa,SAAQ,CAACC,EAAKC,KACpB,MAAMC,EAAWF,EAAIG,cAAc,KAAKC,UAAUC,SAAS,WACrDC,EAAYN,EAAIG,cAAc,MAC9BI,EAAeP,EAAIG,cAAc,MACjCK,EAAgBR,EAAIG,cAAc,sBAClCM,EAAST,EAAIG,cAAc,UAEjC,GAAID,EAEF,YADAL,EAAOa,KAAKJ,EAAUK,aAIxB,MAAMC,EAAQhB,GACVC,EAAOI,GACLJ,EAAOI,GAETY,OAAOC,SAASC,MAEfnB,GACHC,EAAOa,KAAKE,GAGd,MAAMI,EAAYC,IAAIC,KAAKN,GAAO,GAC5BO,EAAaF,IAAIC,KAAKN,GAAO,GAEnCN,EAAUK,YAAcC,EACxBL,EAAaI,YAAcK,EAGzBR,EAAcG,aADG,IAAfQ,EAC0B,cAEA,gBAG9BnB,EAAIoB,MAAMC,WAAaT,EAEvBU,aAAahB,EAAWM,GACxBU,aAAaf,EAAcK,GAC3BU,aAAad,EAAeI,GAC5BU,aAAab,EAAQG,EAAM,IAE7BW,WAAW1B,E,CAGb,SAASyB,aAAahB,EAAWM,GAC/B,MAAMY,EAAYX,OAAOD,GAAOY,YAChClB,EAAUc,MAAMR,MAAQY,EAAY,GAAM,OAAS,M,CAGrD,SAASD,WAAW1B,EAAS,IAE3BV,SAASsC,SAASC,KAAO7B,EACtB8B,KAAK3B,GAAQA,EAAI4B,WAAWC,UAAU,KACtCC,KAAK,I,CAGV,SAAShC,oBACP,OAAIX,SAASsC,SAASC,KAAKK,OAAS,EAC3B5C,SAASsC,SAASC,KACtBG,UAAU,GACVG,MAAM,KACNL,KAAKf,GAAU,IAAMA,IAEnB,E,CA5HTzB,SAAS8C,iBAAiB,WAAYC,IAGpC,GAFiB,CAAC,QAAS,QAAS,QAEvBC,SAASD,EAAME,MAC1BF,EAAMG,iBACN1C,uBACK,GAAmB,SAAfuC,EAAME,KACf,IAAKE,EAAI,EAAGA,EAAIjD,WAAW0C,OAAQO,IACjCjD,WAAWiD,GAAGlC,UAAUmC,OAAO,gBAC/BlD,WAAWiD,GAAGlC,UAAUoC,IAAI,gBAEzB,GAAmB,SAAfN,EAAME,KACf,IAAKE,EAAI,EAAGA,EAAIjD,WAAW0C,OAAQO,IACjCjD,WAAWiD,GAAGlC,UAAUmC,OAAO,WAC/BlD,WAAWiD,GAAGlC,UAAUoC,IAAI,oBAEzB,CACL,MAAMC,EAAWtD,SAASgB,cAAc,eAExCsC,EAASrB,MAAMsB,MAAQ,IAEvBC,YAEA,WACEF,EAASrB,MAAMsB,MAAQ,C,GAHG,I,KAQhCvD,SAAS8C,iBAAiB,SAAUC,IAClC,MAAMU,EAAOV,EAAMW,OAAOC,QAAQF,KAElC,GAAa,SAATA,EAAiB,CACnB,MAAMG,EACmC,MAAvCb,EAAMW,OAAOG,QAAQC,cACjBf,EAAMW,OACNX,EAAMW,OAAOK,SAAS,GAC5BH,EAAK3C,UAAU+C,OAAO,gBACtBJ,EAAK3C,UAAU+C,OAAO,U,KACJ,SAATP,GACTtD,gBAAgB4C,EAAMW,OAAOlC,YAAY,IAuF7ChB,iBAAgB","sources":["index.js"],"sourcesContent":["const columns = document.querySelectorAll(\".col\");\r\nconst colButtons = document.querySelectorAll(\".col button i\");\r\n\r\ndocument.addEventListener(\"keydown\", (event) => {\r\n  const keyCodes = [\"Space\", \"Enter\", \"KeyF\"];\r\n\r\n  if (keyCodes.includes(event.code)) {\r\n    event.preventDefault();\r\n    setRandomColors();\r\n  } else if (event.code === \"KeyL\") {\r\n    for (i = 0; i < colButtons.length; i++) {\r\n      colButtons[i].classList.remove(\"fa-lock-open\");\r\n      colButtons[i].classList.add(\"fa-lock\");\r\n    }\r\n  } else if (event.code === \"KeyU\") {\r\n    for (i = 0; i < colButtons.length; i++) {\r\n      colButtons[i].classList.remove(\"fa-lock\");\r\n      colButtons[i].classList.add(\"fa-lock-open\");\r\n    }\r\n  } else {\r\n    const helpIcon = document.querySelector(\".help__icon\");\r\n\r\n    helpIcon.style.scale = 1.5;\r\n\r\n    setTimeout(changeScaleBack, 150);\r\n\r\n    function changeScaleBack() {\r\n      helpIcon.style.scale = 1;\r\n    }\r\n  }\r\n});\r\n\r\ndocument.addEventListener(\"click\", (event) => {\r\n  const type = event.target.dataset.type;\r\n\r\n  if (type === \"lock\") {\r\n    const node =\r\n      event.target.tagName.toLowerCase() === \"i\"\r\n        ? event.target\r\n        : event.target.children[0];\r\n    node.classList.toggle(\"fa-lock-open\");\r\n    node.classList.toggle(\"fa-lock\");\r\n  } else if (type === \"copy\") {\r\n    copyToClipboard(event.target.textContent);\r\n  }\r\n});\r\n\r\nfunction copyToClipboard(text) {\r\n  return navigator.clipboard.writeText(text);\r\n}\r\n\r\n// function genRandomColor() {\r\n//   const hexCodes = \"0123456789ABCDEF\";\r\n//   let color = \"\";\r\n//   for (let i = 0; i < 6; i++) {\r\n//     color += hexCodes[Math.floor(Math.random() * hexCodes.length)];\r\n//   }\r\n//   return \"#\" + color;\r\n// }\r\n\r\nfunction setRandomColors(isInitial) {\r\n  // const colors = [];\r\n  const colors = isInitial ? getColorsFromHash() : [];\r\n\r\n  columns.forEach((col, index) => {\r\n    const isLocked = col.querySelector(\"i\").classList.contains(\"fa-lock\");\r\n    const colorCode = col.querySelector(\"h2\");\r\n    const colorNameBox = col.querySelector(\"h3\");\r\n    const colorMatchBox = col.querySelector(\".col__color-status\");\r\n    const button = col.querySelector(\"button\");\r\n\r\n    if (isLocked) {\r\n      colors.push(colorCode.textContent);\r\n      return;\r\n    }\r\n\r\n    const color = isInitial\r\n      ? colors[index]\r\n        ? colors[index]\r\n        : chroma.random().hex()\r\n      : chroma.random().hex();\r\n\r\n    if (!isInitial) {\r\n      colors.push(color);\r\n    }\r\n\r\n    const colorName = ntc.name(color)[1];\r\n    const colorMatch = ntc.name(color)[2];\r\n\r\n    colorCode.textContent = color;\r\n    colorNameBox.textContent = colorName;\r\n\r\n    if (colorMatch === true) {\r\n      colorMatchBox.textContent = \"solid match\";\r\n    } else {\r\n      colorMatchBox.textContent = \"approx. match\";\r\n    }\r\n\r\n    col.style.background = color;\r\n\r\n    setTextColor(colorCode, color);\r\n    setTextColor(colorNameBox, color);\r\n    setTextColor(colorMatchBox, color);\r\n    setTextColor(button, color);\r\n  });\r\n  updateHash(colors);\r\n}\r\n\r\nfunction setTextColor(colorCode, color) {\r\n  const luminance = chroma(color).luminance();\r\n  colorCode.style.color = luminance > 0.2 ? \"#000\" : \"#fff\";\r\n}\r\n\r\nfunction updateHash(colors = []) {\r\n  // document.location.hash = colors.toString().replace(/(#)|(,#)/g, \"-\");\r\n  document.location.hash = colors\r\n    .map((col) => col.toString().substring(1))\r\n    .join(\"-\");\r\n}\r\n\r\nfunction getColorsFromHash() {\r\n  if (document.location.hash.length > 1) {\r\n    return document.location.hash\r\n      .substring(1)\r\n      .split(\"-\")\r\n      .map((color) => \"#\" + color);\r\n  }\r\n  return [];\r\n}\r\n\r\nsetRandomColors(true);\r\n"],"names":["columns","document","querySelectorAll","colButtons","copyToClipboard","text","navigator","clipboard","writeText","setRandomColors","isInitial","colors","getColorsFromHash","forEach","col","index","isLocked","querySelector","classList","contains","colorCode","colorNameBox","colorMatchBox","button","push","textContent","color","chroma","random","hex","colorName","ntc","name","colorMatch","style","background","setTextColor","updateHash","luminance","location","hash","map","toString","substring","join","length","split","addEventListener","event","includes","code","preventDefault","i","remove","add","helpIcon","scale","setTimeout","type","target","dataset","node","tagName","toLowerCase","children","toggle"],"version":3,"file":"index.6787ed65.js.map"}